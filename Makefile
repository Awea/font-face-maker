.DEFAULT_GOAL := help

# Dependencies
FONTFORGE := $(shell which fontforge)
TTF2EOT   := $(shell which ttf2eot)
TTF2SVG   := $(shell which batik-ttf2svg)
WOFF2     := $(shell which woff2_compress)

# TTF2SVG has another name on Linux
OS := $(shell uname)
ifeq ($(OS), Linux)
	TTF2SVG := $(shell which ttf2svg)
endif

# Vars
FONT_NAME := $(notdir $(FONT_PATH))
FONT_EXT  := $(suffix $(FONT_NAME))
OUTPUT 		?= $(shell dirname $(FONT_PATH))/

# Functions
NEW_FILE_NAME = $(subst $(FONT_EXT),$(1),$(call FONT_NAME))
CSS_FILE      = $(subst $(FONT_EXT),.css,$(call FONT_NAME))

ifeq ($(FONT_EXT),.otf)
s: generateTtf generateEot generateSvg generateWoff generateWoff2
w: simple generateCss
else
s: generateEot generateSvg generateWoff generateWoff2
w: simple generateCss
endif

simple: s ## Generate ttf, eot, svg, woff and woff2 from otf file
web: w ## Same as make s with css file including font-face declarations

generateTtf:
	$(FONTFORGE) -lang=ff -c 'Open($$1);Print($$fontname);' '$(FONT_PATH)' 2> /dev/null
	$(FONTFORGE) -lang=ff -c 'Open($$1);Print($$weight);' '$(FONT_PATH)' 2> /dev/null
	$(FONTFORGE) -lang=ff -c 'Open($$1);Print($$italicangle);' '$(FONT_PATH)' 2> /dev/null
	$(FONTFORGE) -lang=ff -c 'Open($$1);SetFontNames($$3,$$3,$$3);Generate($$2, "", 8);' '$(FONT_PATH)' '$(OUTPUT)$(call NEW_FILE_NAME,.ttf)' 'false' 2> /dev/null

generateEot: 
	$(TTF2EOT) "$(OUTPUT)$(call NEW_FILE_NAME,.ttf)" > "$(OUTPUT)$(call NEW_FILE_NAME,.eot)"

generateSvg: 
	$(TTF2SVG) "$(OUTPUT)$(call NEW_FILE_NAME,.ttf)" -id "false" -o "$(OUTPUT)$(call NEW_FILE_NAME,.svg)"

generateWoff: 
	$(FONTFORGE) -lang=ff -c 'Open($$1);Generate($$2, "", 8);' '$(FONT_PATH)' '$(OUTPUT)$(call NEW_FILE_NAME,.woff)' 2> /dev/null

generateWoff2: 
	$(WOFF2) "$(OUTPUT)$(call NEW_FILE_NAME,.ttf)"

generateCss:
	@echo "/* Generated by Fontface Maker - https://github.com/Awea/fontfacemaker */" > $(OUTPUT)$(CSS_FILE)
	@echo @font-face { >> $(OUTPUT)$(CSS_FILE)
	@echo	"    font-family: '$(call NEW_FILE_NAME)';" >> $(OUTPUT)$(CSS_FILE)
	@echo	"    src: url('$(call NEW_FILE_NAME,.eot)');" >> $(OUTPUT)$(CSS_FILE)
	@echo	"    src: url('$(call NEW_FILE_NAME,.eot)?#iefix') format('embedded-opentype')," >> $(OUTPUT)$(CSS_FILE)
	@echo	"         url('$(call NEW_FILE_NAME,.woff2)') format('woff2')," >> $(OUTPUT)$(CSS_FILE)
	@echo	"         url('$(call NEW_FILE_NAME,.woff)') format('woff')," >> $(OUTPUT)$(CSS_FILE)
	@echo	"         url('$(call NEW_FILE_NAME,.ttf)') format('truetype')," >> $(OUTPUT)$(CSS_FILE)
	@echo	"         url('$(call NEW_FILE_NAME,.svg#false)') format('svg');" >> $(OUTPUT)$(CSS_FILE)
	@echo	"    font-weight: normal;" >> $(OUTPUT)$(CSS_FILE)
	@echo	"    font-style: normal;" >> $(OUTPUT)$(CSS_FILE)
	@echo } >> $(OUTPUT)$(CSS_FILE)

help: ## This help
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'